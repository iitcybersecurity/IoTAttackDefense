//
// Generated file, do not edit! Created by opp_msgc 4.2 from applications/myapplication/MyMessage.msg.
//

#ifndef _MYMESSAGE_M_H_
#define _MYMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <TransportAddress.h>
#include <OverlayKey.h>
#include <MyApplication.h>
// }}



/**
 * Enum generated from <tt>applications/myapplication/MyMessage.msg</tt> by opp_msgc.
 * <pre>
 * enum MessageType 
 * {
 *     
 *     
 *     MYMSG_GET_TOPOLOGY1_DATA = 3;
 *     MYMSG_GET_TOPOLOGY1_RESPONSE = 4;
 *     MYMSG_PUT_TOPOLOGY1_DATA = 5;
 *     MYMSG_PUT_FLOW = 6;
 *     MYMSG_GET_FLOW = 7;
 *     MYMSG_PUT_TEMPERATURE = 8;
 *     MYMSG_PUT_MOTION = 9;
 *     MYMSG_GET_TEMPERATURE = 10;
 *     MYMSG_GET_MOTION = 11;
 *     MYMSG_GET_TEMPERATURE_RESPONSE = 12;
 *     MYMSG_GET_MOTION_RESPONSE = 13;
 *     MYMSG_GET_FLOW_RESPONSE = 14;
 *     MYMSG_PUT_REPUTATION = 15;
 *     MYMSG_GET_REPUTATION = 16;
 *     MYMSG_GET_REPUTATION_RESPONSE = 17;
 *     MYMSG_PUT_VOTE = 18;
 *     MYMSG_GET_VOTE = 19;
 *     MYMSG_GET_VOTE_RESPONSE = 20;
 * }
 * </pre>
 */
enum MessageType {
    MYMSG_GET_TOPOLOGY1_DATA = 3,
    MYMSG_GET_TOPOLOGY1_RESPONSE = 4,
    MYMSG_PUT_TOPOLOGY1_DATA = 5,
    MYMSG_PUT_FLOW = 6,
    MYMSG_GET_FLOW = 7,
    MYMSG_PUT_TEMPERATURE = 8,
    MYMSG_PUT_MOTION = 9,
    MYMSG_GET_TEMPERATURE = 10,
    MYMSG_GET_MOTION = 11,
    MYMSG_GET_TEMPERATURE_RESPONSE = 12,
    MYMSG_GET_MOTION_RESPONSE = 13,
    MYMSG_GET_FLOW_RESPONSE = 14,
    MYMSG_PUT_REPUTATION = 15,
    MYMSG_GET_REPUTATION = 16,
    MYMSG_GET_REPUTATION_RESPONSE = 17,
    MYMSG_PUT_VOTE = 18,
    MYMSG_GET_VOTE = 19,
    MYMSG_GET_VOTE_RESPONSE = 20
};

/**
 * Class generated from <tt>applications/myapplication/MyMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet MyMessage 
 * {
 *     int type enum(MessageType);      
 *     TransportAddress senderAddress;  
 *     OverlayKey key;
 *     int requesterNodeId;
 *     int targetNodeId;
 *     int ownerNodeId;
 *     
 * 	string detectedValue;
 * 	string temperatureValue;
 * 	string motionValue;
 * 	string flowData[10];
 * 	double reputationValue[2];
 * 	double voteValue;
 * 	bool isInvalidData;
 * 	int TimeSlot;
 * 	
 * 
 * 
 * 	
 * }
 * </pre>
 */
class MyMessage : public ::cPacket
{
  protected:
    int type_var;
    TransportAddress senderAddress_var;
    OverlayKey key_var;
    int requesterNodeId_var;
    int targetNodeId_var;
    int ownerNodeId_var;
    opp_string detectedValue_var;
    opp_string temperatureValue_var;
    opp_string motionValue_var;
    opp_string flowData_var[10];
    double reputationValue_var[2];
    double voteValue_var;
    bool isInvalidData_var;
    int TimeSlot_var;

  private:
    void copy(const MyMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyMessage&);

  public:
    MyMessage(const char *name=NULL, int kind=0);
    MyMessage(const MyMessage& other);
    virtual ~MyMessage();
    MyMessage& operator=(const MyMessage& other);
    virtual MyMessage *dup() const {return new MyMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual TransportAddress& getSenderAddress();
    virtual const TransportAddress& getSenderAddress() const {return const_cast<MyMessage*>(this)->getSenderAddress();}
    virtual void setSenderAddress(const TransportAddress& senderAddress);
    virtual OverlayKey& getKey();
    virtual const OverlayKey& getKey() const {return const_cast<MyMessage*>(this)->getKey();}
    virtual void setKey(const OverlayKey& key);
    virtual int getRequesterNodeId() const;
    virtual void setRequesterNodeId(int requesterNodeId);
    virtual int getTargetNodeId() const;
    virtual void setTargetNodeId(int targetNodeId);
    virtual int getOwnerNodeId() const;
    virtual void setOwnerNodeId(int ownerNodeId);
    virtual const char * getDetectedValue() const;
    virtual void setDetectedValue(const char * detectedValue);
    virtual const char * getTemperatureValue() const;
    virtual void setTemperatureValue(const char * temperatureValue);
    virtual const char * getMotionValue() const;
    virtual void setMotionValue(const char * motionValue);
    virtual unsigned int getFlowDataArraySize() const;
    virtual const char * getFlowData(unsigned int k) const;
    virtual void setFlowData(unsigned int k, const char * flowData);
    virtual unsigned int getReputationValueArraySize() const;
    virtual double getReputationValue(unsigned int k) const;
    virtual void setReputationValue(unsigned int k, double reputationValue);
    virtual double getVoteValue() const;
    virtual void setVoteValue(double voteValue);
    virtual bool getIsInvalidData() const;
    virtual void setIsInvalidData(bool isInvalidData);
    virtual int getTimeSlot() const;
    virtual void setTimeSlot(int TimeSlot);
};

inline void doPacking(cCommBuffer *b, MyMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MyMessage& obj) {obj.parsimUnpack(b);}


#endif // _MYMESSAGE_M_H_
